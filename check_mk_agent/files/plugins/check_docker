#! /usr/bin/env python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
#
# Author: lars.getwan@metrosystems.net
#
# Prerequisites:
#  docker-py
#  
# Purpose:
#  This script uses docker-py API to connect to a local docker service
#  It queries data about the service, the containers and the images
#  The motivation for this script is based on the nagios check "nagios-docker",
#  written by James S. Martin: https://github.com/jsmartin/nagios-docker
#

import docker
#import pprint
import requests

def process_containers(docker_containers):

    print("<<<docker_containers:sep(35)>>>")

    # [{u'Command': u"nginx -g 'daemon off;'",
    #   u'Created': 1499762426,
    #   u'HostConfig': {u'NetworkMode': u'default'},
    #   u'Image': u'nginx',
    #   u'Names': [u'/nginx'],
    #   u'SizeRootFs': 107607244,
    #   u'SizeRw': 97410,
    #   u'State': u'running',
    #   u'Status': u'Up 2 hours'},
    # ]

    for id in docker_containers:
        #pprint.pprint(docker_container)
        line = []
        docker_container = docker_containers[id]
        line.append(docker_container['Names'][0])
        line.append('Names=%s' % ','.join(docker_container['Names']))
        line.append('State=%s' % docker_container['State'])
        line.append('Status=%s' % docker_container['Status'])
        line.append('Created=%s' % docker_container['Created'])
        line.append('Command=%s' % docker_container['Command'])
        line.append('Image=%s' % docker_container['Image'])
        if 'SizeRootFs' in docker_container:
            line.append('SizeRootFs=%s' % docker_container['SizeRootFs'])
        if 'SizeRw' in docker_container:
            line.append('SizeRw=%s' % docker_container['SizeRw'])

        stats = docker_container['Stats']

        # u'cpu_stats': {u'cpu_usage': {u'total_usage': 29103411,}
        #                u'system_cpu_usage': 1120853710000000,}}
        # u'precpu_stats': {u'cpu_usage': {u'total_usage': 29103411,}
        #                   u'system_cpu_usage': 1120852720000000,}}
        # u'memory_stats': {u'limit': 1040609280,
        #                   u'max_usage': 1540096,
        #                   u'usage': 1404928},

        if docker_container['State'] == 'running':
            cpu_usage_pct = 100 * ( stats['cpu_stats']['cpu_usage']['total_usage'] - stats['precpu_stats']['cpu_usage']['total_usage'] ) / \
                ( stats['cpu_stats']['system_cpu_usage'] - stats['precpu_stats']['system_cpu_usage'] )
            line.append('CPU_pct=%f' % cpu_usage_pct)

            line.append('Memory_used=%d' % stats['memory_stats']['usage'])
            line.append('Memory_limit=%d' % stats['memory_stats']['limit'])

        print("#".join(line))

    return


def process_images(docker_images, docker_containers):

    print("<<<docker_images:sep(35)>>>")

    # [{u'Containers': -1,
    #   u'Created': 1499283368,
    #   u'Id': u'sha256:2f7f7bce89290f69233351416b0cc8d0c8d4800c825ba92e70de5b1cc048a50a',
    #   u'Labels': {},
    #   u'ParentId': u'',
    #   u'RepoDigests': [u'nginx@sha256:8e2645484fe09122ea8aef7a186658082a860312d47fa51675cbf21d1b4b901a'],
    #   u'RepoTags': [u'nginx:latest'],
    #   u'SharedSize': -1,
    #   u'Size': 107509834,
    #   u'VirtualSize': 107509834},
    # ]

    for docker_image in docker_images:
        line = []

        image_id = docker_image['Id']
        image_name = docker_image['RepoTags'][0]

        container_count = 0
        diskspace = docker_image['Size']    # The image uses this space only once
        cpu_usage_pct = 0
        mem_used = 0

        for id in docker_containers:
            if docker_containers[id]['ImageID'] == image_id:
                if docker_containers[id]['State'] == 'running':
                    if 'SizeRw' in docker_containers[id]:
                        # The space used for data that is changed during container runtime
                        diskspace += int(docker_containers[id]['SizeRw'])
                    container_count += 1
                    stats = docker_containers[id]['Stats']
                    cpu_usage_pct += ( stats['cpu_stats']['cpu_usage']['total_usage'] - stats['precpu_stats']['cpu_usage']['total_usage'] ) * 100 / \
                        ( stats['cpu_stats']['system_cpu_usage'] - stats['precpu_stats']['system_cpu_usage'] )
                    mem_used += stats['memory_stats']['usage']

        line.append(image_name)
        line.append("Running_containers=%s" % container_count)
        line.append("Diskspace_used=%d" % diskspace)

        line.append('CPU_pct=%f' % cpu_usage_pct)
        line.append('Memory_used=%d' % mem_used)

        print("#".join(line))

    return


def main():
    containers = {}

    conn = docker.from_env()

    try:
        docker_info = conn.info()

        # try to connect the docker service, and catch an exception if we can't.
        print("<<<docker_info:sep(59)>>>")
        print('service;up')
        print('images;%s' % docker_info['Images'])
        print('go_routines;%s' % docker_info['NGoroutines'])
        print('file_descriptors;%s' % docker_info['NFd'])
        print('events_listeners;%s' % docker_info['NEventsListener'])

        docker_containers = conn.containers(all=1, size=1)

        for docker_container in docker_containers:
            id = docker_container['Id']
            docker_stats = conn.stats(docker_container['Id'], decode=1, stream=0)
            containers[id] = docker_container
            containers[id]['Stats'] = docker_stats

        images = conn.images(all=1)

        process_containers(containers)
        process_images(images, containers)

    except requests.exceptions.ConnectionError as objectname:
        # This happens if the service is not running. Let's show that to the CMK server
        print("<<<docker_info:sep(59)>>>")
        print('service;down')
        print("<<<docker_containers:sep(35)>>>")
        print("<<<docker_images:sep(35)>>>")
    except:
        print("Unexpected error:")
        raise


if __name__ == '__main__':
    main()
